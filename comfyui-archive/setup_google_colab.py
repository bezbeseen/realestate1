#!/usr/bin/env python3
"""
Google Colab Setup Script for BeSeen ComfyUI
This script helps you set up ComfyUI on Google Colab for faster image generation
"""

import json

def create_colab_notebook():
    """Create a Google Colab notebook for ComfyUI"""
    
    notebook = {
        "nbformat": 4,
        "nbformat_minor": 0,
        "metadata": {
            "colab": {
                "provenance": [],
                "gpuType": "T4",
                "private_outputs": True
            },
            "kernelspec": {
                "name": "python3",
                "display_name": "Python 3"
            },
            "language_info": {
                "name": "python"
            },
            "accelerator": "GPU"
        },
        "cells": [
            {
                "cell_type": "markdown",
                "source": [
                    "# üé® BeSeen AI Image Generator\\n",
                    "\\n",
                    "**Generate professional product images for your BeSeen website using ComfyUI on Google Colab**\\n",
                    "\\n",
                    "### üöÄ **Quick Start:**\\n",
                    "1. **Change Runtime**: `Runtime` ‚Üí `Change runtime type` ‚Üí `Hardware accelerator: GPU`\\n",
                    "2. **Run all cells** in order (click ‚ñ∂Ô∏è on each)\\n",
                    "3. **Download your images** from the final cell\\n",
                    "\\n",
                    "### ‚ö° **Performance:**\\n",
                    "- **Free Colab**: ~15-30 seconds per image\\n",
                    "- **Colab Pro**: ~10-20 seconds per image\\n",
                    "- **Much faster than local Mac!**\\n",
                    "\\n",
                    "---"
                ],
                "metadata": {"id": "header"}
            },
            {
                "cell_type": "markdown",
                "source": ["## üì¶ Step 1: Install ComfyUI & Dependencies"],
                "metadata": {"id": "install_header"}
            },
            {
                "cell_type": "code",
                "source": [
                    "# Install ComfyUI and dependencies\\n",
                    "!git clone https://github.com/comfyanonymous/ComfyUI.git\\n",
                    "%cd ComfyUI\\n",
                    "!pip install -r requirements.txt\\n",
                    "!pip install pandas requests pillow\\n",
                    "\\n",
                    "print('‚úÖ ComfyUI installed successfully!')"
                ],
                "metadata": {"id": "install_comfyui"},
                "execution_count": None,
                "outputs": []
            },
            {
                "cell_type": "markdown",
                "source": ["## ü§ñ Step 2: Download AI Model"],
                "metadata": {"id": "model_header"}
            },
            {
                "cell_type": "code",
                "source": [
                    "# Download the Stable Diffusion model\\n",
                    "import os\\n",
                    "os.makedirs('models/checkpoints', exist_ok=True)\\n",
                    "\\n",
                    "# Download the model (this takes a few minutes first time)\\n",
                    "!wget -O models/checkpoints/v1-5-pruned-emaonly.safetensors \\\\\\n",
                    "  'https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.safetensors'\\n",
                    "\\n",
                    "print('‚úÖ AI Model downloaded successfully!')\\n",
                    "print(f'üìÅ Model size: {os.path.getsize(\"models/checkpoints/v1-5-pruned-emaonly.safetensors\") / (1024*1024*1024):.1f} GB')"
                ],
                "metadata": {"id": "download_model"},
                "execution_count": None,
                "outputs": []
            },
            {
                "cell_type": "markdown",
                "source": ["## üöÄ Step 3: Start ComfyUI Server"],
                "metadata": {"id": "server_header"}
            },
            {
                "cell_type": "code",
                "source": [
                    "# Start ComfyUI server in background\\n",
                    "import subprocess\\n",
                    "import time\\n",
                    "import threading\\n",
                    "import requests\\n",
                    "\\n",
                    "# Start ComfyUI server\\n",
                    "def start_comfyui():\\n",
                    "    subprocess.run(['python', 'main.py', '--listen', '0.0.0.0', '--port', '8188'], \\n",
                    "                   capture_output=True)\\n",
                    "\\n",
                    "# Start in background thread\\n",
                    "server_thread = threading.Thread(target=start_comfyui, daemon=True)\\n",
                    "server_thread.start()\\n",
                    "\\n",
                    "# Wait for server to start\\n",
                    "print('üöÄ Starting ComfyUI server...')\\n",
                    "for i in range(30):\\n",
                    "    try:\\n",
                    "        response = requests.get('http://localhost:8188/system_stats', timeout=2)\\n",
                    "        if response.status_code == 200:\\n",
                    "            print('‚úÖ ComfyUI server is running!')\\n",
                    "            print(f'üñ•Ô∏è  GPU: {response.json()[\"devices\"][0][\"name\"]}')\\n",
                    "            break\\n",
                    "    except:\\n",
                    "        time.sleep(2)\\n",
                    "        print(f'‚è≥ Waiting for server... ({i+1}/30)')\\n",
                    "else:\\n",
                    "    print('‚ùå Server failed to start')"
                ],
                "metadata": {"id": "start_server"},
                "execution_count": None,
                "outputs": []
            },
            {
                "cell_type": "markdown",
                "source": ["## üé® Step 4: Generate Your BeSeen Images"],
                "metadata": {"id": "generate_header"}
            },
            {
                "cell_type": "code",
                "source": [
                    "import json\\n",
                    "import time\\n",
                    "import random\\n",
                    "from datetime import datetime\\n",
                    "\\n",
                    "# Your BeSeen product prompts\\n",
                    "product_prompts = [\\n",
                    "    {\\n",
                    "        'name': 'business_cards_premium',\\n",
                    "        'prompt': 'Professional business cards, premium quality cardstock, elegant design, clean white background, studio lighting, product photography, detailed texture, high resolution, commercial quality',\\n",
                    "        'filename': 'business_cards_premium.png'\\n",
                    "    },\\n",
                    "    {\\n",
                    "        'name': 'business_cards_luxury',\\n",
                    "        'prompt': 'Luxury business cards with gold foil accents, premium thick cardstock, elegant design, metallic highlights, professional photography, clean background, high-end commercial quality',\\n",
                    "        'filename': 'business_cards_luxury.png'\\n",
                    "    },\\n",
                    "    {\\n",
                    "        'name': 'real_estate_flyers',\\n",
                    "        'prompt': 'Professional real estate marketing flyers, modern property listings, clean layout, high-quality printing, bright design, studio photography, commercial real estate materials',\\n",
                    "        'filename': 'real_estate_flyers.png'\\n",
                    "    },\\n",
                    "    {\\n",
                    "        'name': 'vinyl_banners',\\n",
                    "        'prompt': 'Durable vinyl banners for outdoor advertising, weather-resistant material, vibrant colors, professional signage, commercial quality, grommets visible, hanging display',\\n",
                    "        'filename': 'vinyl_banners.png'\\n",
                    "    },\\n",
                    "    {\\n",
                    "        'name': 'brochures',\\n",
                    "        'prompt': 'Professional tri-fold brochures, glossy finish, corporate marketing materials, clean layout, high-quality printing, business brochure design, studio photography',\\n",
                    "        'filename': 'brochures.png'\\n",
                    "    }\\n",
                    "]\\n",
                    "\\n",
                    "def generate_image(prompt, filename_prefix):\\n",
                    "    '''Generate a single image using ComfyUI API'''\\n",
                    "    \\n",
                    "    # ComfyUI workflow\\n",
                    "    workflow = {\\n",
                    "        '4': {\\n",
                    "            'inputs': {'ckpt_name': 'v1-5-pruned-emaonly.safetensors'},\\n",
                    "            'class_type': 'CheckpointLoaderSimple'\\n",
                    "        },\\n",
                    "        '6': {\\n",
                    "            'inputs': {'width': 1024, 'height': 1024, 'batch_size': 1},\\n",
                    "            'class_type': 'EmptyLatentImage'\\n",
                    "        },\\n",
                    "        '9': {\\n",
                    "            'inputs': {'text': prompt, 'clip': ['4', 1]},\\n",
                    "            'class_type': 'CLIPTextEncode'\\n",
                    "        },\\n",
                    "        '10': {\\n",
                    "            'inputs': {'text': 'text, watermark, low quality, ugly, deformed, blurry', 'clip': ['4', 1]},\\n",
                    "            'class_type': 'CLIPTextEncode'\\n",
                    "        },\\n",
                    "        '5': {\\n",
                    "            'inputs': {\\n",
                    "                'model': ['4', 0],\\n",
                    "                'positive': ['9', 0],\\n",
                    "                'negative': ['10', 0],\\n",
                    "                'latent_image': ['6', 0],\\n",
                    "                'seed': random.randint(1, 1000000),\\n",
                    "                'steps': 20,\\n",
                    "                'cfg': 8.0,\\n",
                    "                'sampler_name': 'dpmpp_2m',\\n",
                    "                'scheduler': 'karras',\\n",
                    "                'denoise': 1.0\\n",
                    "            },\\n",
                    "            'class_type': 'KSampler'\\n",
                    "        },\\n",
                    "        '7': {\\n",
                    "            'inputs': {'samples': ['5', 0], 'vae': ['4', 2]},\\n",
                    "            'class_type': 'VAEDecode'\\n",
                    "        },\\n",
                    "        '8': {\\n",
                    "            'inputs': {'filename_prefix': filename_prefix, 'images': ['7', 0]},\\n",
                    "            'class_type': 'SaveImage'\\n",
                    "        }\\n",
                    "    }\\n",
                    "    \\n",
                    "    # Send to ComfyUI\\n",
                    "    try:\\n",
                    "        response = requests.post('http://localhost:8188/prompt', json={'prompt': workflow})\\n",
                    "        if response.status_code == 200:\\n",
                    "            result = response.json()\\n",
                    "            return result.get('prompt_id')\\n",
                    "        else:\\n",
                    "            print(f'‚ùå Error: {response.text}')\\n",
                    "            return None\\n",
                    "    except Exception as e:\\n",
                    "        print(f'‚ùå Error: {e}')\\n",
                    "        return None\\n",
                    "\\n",
                    "def wait_for_completion():\\n",
                    "    '''Wait for all queued images to complete'''\\n",
                    "    while True:\\n",
                    "        try:\\n",
                    "            response = requests.get('http://localhost:8188/queue')\\n",
                    "            if response.status_code == 200:\\n",
                    "                queue_data = response.json()\\n",
                    "                pending = len(queue_data.get('queue_pending', []))\\n",
                    "                running = len(queue_data.get('queue_running', []))\\n",
                    "                \\n",
                    "                if pending == 0 and running == 0:\\n",
                    "                    break\\n",
                    "                    \\n",
                    "                print(f'‚è≥ Queue: {running} running, {pending} pending')\\n",
                    "                time.sleep(3)\\n",
                    "        except:\\n",
                    "            time.sleep(3)\\n",
                    "\\n",
                    "# Generate all images\\n",
                    "print('üé® Starting image generation...')\\n",
                    "print('=' * 50)\\n",
                    "\\n",
                    "successful_generations = []\\n",
                    "start_time = datetime.now()\\n",
                    "\\n",
                    "for i, product in enumerate(product_prompts, 1):\\n",
                    "    print(f'\\\\n[{i}/{len(product_prompts)}] Generating: {product[\"name\"]}')\\n",
                    "    print(f'üìù Prompt: {product[\"prompt\"][:80]}...')\\n",
                    "    \\n",
                    "    prompt_id = generate_image(product['prompt'], product['name'])\\n",
                    "    \\n",
                    "    if prompt_id:\\n",
                    "        print(f'‚úÖ Queued successfully (ID: {prompt_id})')\\n",
                    "        successful_generations.append(product)\\n",
                    "    else:\\n",
                    "        print(f'‚ùå Failed to queue: {product[\"name\"]}')\\n",
                    "    \\n",
                    "    # Small delay between requests\\n",
                    "    time.sleep(1)\\n",
                    "\\n",
                    "print(f'\\\\n‚è≥ Waiting for all {len(successful_generations)} images to complete...')\\n",
                    "wait_for_completion()\\n",
                    "\\n",
                    "end_time = datetime.now()\\n",
                    "total_time = (end_time - start_time).total_seconds()\\n",
                    "\\n",
                    "print(f'\\\\nüéâ Generation Complete!')\\n",
                    "print(f'‚úÖ Generated: {len(successful_generations)} images')\\n",
                    "print(f'‚è±Ô∏è  Total time: {total_time:.1f} seconds')\\n",
                    "print(f'üöÄ Average: {total_time/len(successful_generations):.1f} seconds per image')"
                ],
                "metadata": {"id": "generate_images"},
                "execution_count": None,
                "outputs": []
            },
            {
                "cell_type": "markdown",
                "source": ["## üìÅ Step 5: Download Your Images"],
                "metadata": {"id": "download_header"}
            },
            {
                "cell_type": "code",
                "source": [
                    "import zipfile\\n",
                    "import glob\\n",
                    "from datetime import datetime\\n",
                    "\\n",
                    "# Find all generated images\\n",
                    "output_dir = 'output'\\n",
                    "image_files = glob.glob(f'{output_dir}/*.png')\\n",
                    "\\n",
                    "print(f'üìÅ Found {len(image_files)} generated images:')\\n",
                    "for img in image_files:\\n",
                    "    size_mb = os.path.getsize(img) / (1024 * 1024)\\n",
                    "    print(f'  ‚Ä¢ {os.path.basename(img)} ({size_mb:.1f} MB)')\\n",
                    "\\n",
                    "# Create ZIP file\\n",
                    "timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\\n",
                    "zip_filename = f'BeSeen_AI_Images_{timestamp}.zip'\\n",
                    "\\n",
                    "with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:\\n",
                    "    for img_file in image_files:\\n",
                    "        # Add with just the filename (no path)\\n",
                    "        zipf.write(img_file, os.path.basename(img_file))\\n",
                    "    \\n",
                    "    # Add a README file\\n",
                    "    readme_content = f'''# BeSeen AI Generated Images\\n",
                    "\\n",
                    "Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n",
                    "Total Images: {len(image_files)}\\n",
                    "Platform: Google Colab\\n",
                    "\\n",
                    "## Usage Instructions:\\n",
                    "1. Extract all images to your website's assets/images/products/ folder\\n",
                    "2. Update your HTML files to reference these images\\n",
                    "3. Optimize images for web if needed\\n",
                    "\\n",
                    "## Generated Products:\\n",
                    "'''\\n",
                    "    \\n",
                    "    for product in product_prompts:\\n",
                    "        readme_content += f'- {product[\"name\"]}: {product[\"filename\"]}\\\\n'\\n",
                    "    \\n",
                    "    zipf.writestr('README.txt', readme_content)\\n",
                    "\\n",
                    "zip_size_mb = os.path.getsize(zip_filename) / (1024 * 1024)\\n",
                    "print(f'\\\\nüì¶ Created ZIP file: {zip_filename} ({zip_size_mb:.1f} MB)')\\n",
                    "\\n",
                    "# Download the ZIP file\\n",
                    "from google.colab import files\\n",
                    "print('\\\\n‚¨áÔ∏è  Downloading images...')\\n",
                    "files.download(zip_filename)\\n",
                    "\\n",
                    "print('\\\\nüéâ SUCCESS! Your BeSeen product images are ready!')\\n",
                    "print('\\\\nüìã Next Steps:')\\n",
                    "print('1. Extract the ZIP file on your computer')\\n",
                    "print('2. Upload images to your website\\'s assets/images/products/ folder')\\n",
                    "print('3. Update your HTML files to use the new images')\\n",
                    "print('\\\\nüöÄ Your images are now professional AI-generated and ready for your website!')"
                ],
                "metadata": {"id": "package_download"},
                "execution_count": None,
                "outputs": []
            }
        ]
    }
    
    # Save the notebook
    with open('BeSeen_ComfyUI_Generator.ipynb', 'w') as f:
        json.dump(notebook, f, indent=2)
    
    print("‚úÖ Google Colab notebook created: BeSeen_ComfyUI_Generator.ipynb")
    print("\nüöÄ Next steps:")
    print("1. Go to https://colab.research.google.com/")
    print("2. Upload the BeSeen_ComfyUI_Generator.ipynb file")
    print("3. Change runtime to GPU (Runtime ‚Üí Change runtime type ‚Üí GPU)")
    print("4. Run all cells in order")
    print("5. Download your generated images!")
    print("\n‚ö° This will be 10-20x faster than your local Mac!")

if __name__ == "__main__":
    create_colab_notebook() 